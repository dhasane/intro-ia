:-dynamic(pinza/0).
:-dynamic(robot/1).

caja(azul).
caja(verde).
habitacion(h1).
habitacion(h2).
puerta(h1,h2).

cajaEn(azul,h1).
cajaEn(verde,h1).
cajasHabitacion(h1,[azul,verde]).
cajasHabitacion(h2,[]).

pinza().
robot(h1).
posRobot(H):- robot(H).

existePuerta(X,Y):- puerta(X,Y); puerta(Y,X).
%Comprueba si esta vacia
plib():- pinza(),write('yes'),nl.
plib():- not(pinza()),write('no'),nl.

ejecutar(Opcion):- Opcion == 1,coger(),menu;
    				Opcion == 2,plib(),menu;
    				Opcion == 3,mover(),menu;
    				Opcion == 4,posicion,menu;
    				Opcion == 5,soltar(),menu;
    				Opcion == 0,true.
menu:- write('1. coger: (Nombre de la caja)'),nl,write('2. vacia pinza ?'),nl
    ,write('3. Mover de _ a _ '),nl,write('4. Posicion robot '),nl
    ,write('5. Soltar '),nl,write('0. salir')
    ,read(Opcion),ejecutar(Opcion).


%falta quitarla de las cajas del cuarto
eliminarCoger:- retractall(pinza()),!.
agregarCoger:- assert(pinza(Cajita)),!.
coger():- write('Elemento a coger'),read(Cajita),caja(Cajita),posRobot(H),cajaEn(Cajita,H),plib()
    ,eliminarCoger,agregarCoger.


posicion:- posRobot(H),write(H),nl.

eliminarMover:- retractall(robot(h1)),!.
agregarMover:- assert(robot(h2)),!.
mover():- write('De'),read(De),write('a'),read(A),existePuerta(De,A),eliminarMover,agregarMover. 



eliminarSoltar:- retractall(pinza(Cajita)),!.
agregarSoltar:- assert(pinza()),!.
soltar():- plib(),eliminarSoltar,agregarSoltar.



