/* TODO:
 * Validacion en numero de argumentos de los axiomas del predicado
 * verificar variables y valores del predicado
Indice:
	Class Value
	Class Axioma
	Class Predicado
	Class Data
	leerLineaSimple
	leerLinea
	addAxioma
	addPredicado
	main
 */

#include <iostream>
#include <stdio.h>
#include <string.h>
#include <vector>
#include <map>

using namespace std;

vector<vector<string> > leerLinea(string linea);
vector<string> leerLineaSimple( string linea);


/*
 * Tiene un vector de strings, que son los datos de un axioma simple
 * Ej. perro(grande) / caracteristica(casa,pintada,roja)
 * y esta clase solo la tiene la clase Axioma
 */
class Value{
public:
	vector<string> data;

	Value(vector<string> val){
		this->data = val;
	}

	void show(){
		for(unsigned int i = 0; i < data.size(); i++){
			if(i == data.size()-1)
				cout<<  data[i];
			else
				cout<<  data[i] << ",";
		}

	}
};

/*
 * Tiene un vector de Valores, que son los datos que se han guardado
 * hasta el momento del axioma simple, todos son del mismo largo,
 * un aioma declarado de un solo valor, no se le puede asignar dos
 * valores en uno solo Ej. 1. perro(grande) y 2. perro(pelo,negro), queda el primero
 * El nombre, es el identificador único de los axiomas, con el se hace la regla anterior
 */
class Axioma{
public:
	string nombre;
	vector<Value> valores;
	unsigned int params;
	bool espectral;

	Axioma(string nom, vector<string> data){
		this->nombre  = nom;
		this->valores.empty();
		this->add(data);
		params = valores[0].data.size();
		this->espectral = false;
	}

	Axioma(string nom, bool gg, unsigned int nParam){
		this->nombre  = nom;
		this->valores.empty();
		this->params = nParam;
		this->espectral = true;
	}

	void show(){
		for(unsigned int i = 0; i < valores.size(); i++){
			cout<<this->nombre<<"(";
			valores[i].show();
			cout<<")"<<endl;
		}
	}

	void add(vector<string> val){
		if(valores.empty() || espectral){
			Value NewData(val);
			valores.push_back(NewData);
			espectral = false;
			return;
		}
		else if(val.size() != valores[0].data.size()){
			cout<<"Error de numero de datos"<<endl;
			return;
		}
		else{
			Value NewData(val);
			valores.push_back(NewData);
			return;
		}
	}

};


/*
 * Tiene un vector de axiomas, que son a que axioma está haciendo referencia
 * El vector de variables, es un vector de enteros, para facil manejo, y funciona así
 * si le entra "ave(X1),casa(X2),herramienta(X1)" queda en 0,1,0
 * si le entra "ave(X2),casa(X1),herramienta(X3)" queda en 0,1,2
 * si le entra "ave(X1),casa(X1),herramienta(X1)" queda en 0,0,0
 * el numero es solo el identificador de que variables son iguales
 * Si hay una axioma de multiples variables, se guardan linealmente,
 * en el mismo orden en el que entran
 */
class Predicado{
public:
	vector<int> variables;
	vector<Axioma> axiomas;

	Predicado(vector<Axioma> ax, vector<int> data){
		this->variables = data;
		this->axiomas = ax;
	}

	void show(){
		//TODO Arreglar para más de una variable
		for(unsigned int i = 0; i < axiomas.size(); i++){
			cout<<axiomas[i].nombre<<" -> Variable#"<<variables[i]<<endl;
		}
	}

};

/*
 * Solo sirve para unir, nada más por ahora
 */
class Data{
public:
	vector<Axioma> axiomasBase;
	vector<Predicado> predicados;

	Data(){
		axiomasBase.empty();
		predicados.empty();
	}

	void update(vector<Axioma> ax,	vector<Predicado> pr){
		this->axiomasBase = ax;
		this->predicados = pr;
	}
};

vector<string> leerLineaSimple(string linea){
	vector<string> fields;
	fields.clear();
	int a = 0, b = 0, end = linea.size();

	while(linea[b] != '(' && b < end)
		b++;

	fields.push_back(linea.substr(a,b));
	b++;


	while(a+b < end){
		a = a+b;
		b = 0;
		while(linea[a+b] != ',' && linea[a+b] != ')' && a+b < end)
			b++;

		fields.push_back(linea.substr(a,b));
		b++;
	}
	return fields;
}

vector<vector<string> > leerLinea(string linea){

	vector<vector<string> > complex;
	complex.clear();
	int a = 0, b = 0, end = linea.size();

	while(a+b < end){
		a += b;
		b = 0;
		while(linea[a+b] != ')' && b < end){
			b++;
		}

		if(linea[a+b] == ')'){
			b++;
			complex.push_back(leerLineaSimple(linea.substr(a,b)));

			b++;
			while(linea[a+b] == ' ')
				b++;
		}
	}
	return complex;
}

/*
 * Añade un axioma a una lista ya existente de axiomas
 * Si el nombre del axioma ya existe lo agrega, si no
 * lo crea como uno nuevo
 */
vector<Axioma> addAxioma(vector<string> sample, vector<Axioma> axiomas){
	vector<string> sub;
	for(unsigned int i=1;i<sample.size();i++)
		sub.push_back(sample[i]);

	for(unsigned int i=0;i<axiomas.size();i++){
		if(axiomas[i].nombre == sample[0]){
			axiomas[i].add(sub);
			return axiomas;
		}
	}

	Axioma aux(sample[0],sub);
	axiomas.push_back(aux);
	return axiomas;
}

/*
 * Crea el predicado con las reglas descritas en la clase predicado
 */
Data addPredicado(vector<vector<string> > complex, Data all){

	vector<Axioma> axiomas = all.axiomasBase;
	vector<Predicado> predicados = all.predicados;
	// Bloque 1, busca si todos los axiomas del predicado existen, si no existen
	// crea un axioma fantasma (pendiente por recibir valor)
	vector<int> marks;
	for(unsigned int k=0;k<complex.size();k++){
		for(unsigned int j=0;j<axiomas.size();j++){
			if(complex[k][0] == axiomas[j].nombre){
				marks.push_back(j);
			}
		}
		if(marks.size() != k+1){
			marks.push_back(axiomas.size());
			Axioma fantasma(complex[k][0],true,complex[k].size()-1);
			axiomas.push_back(fantasma);
		}
	}

	if(marks.size() != complex.size()){
		cout<<"ERROR, alguno de los axiomas no existe";
		return all;
	}


	// Esto crea los numeros mágicos de las variables
	vector<int> valoresVariable;
	map<string,int> mapa;
	int cont = 0;
	for(unsigned int k=0;k<complex.size();k++){
		for(unsigned int i=1;i<complex[k].size();i++){
			if ( mapa.find(complex[k][i]) == mapa.end() ) {
				// La variable aun no aparecía
				mapa[complex[k][i]] = cont;
				cont++;
			}
			valoresVariable.push_back(mapa[complex[k][i]]);
		}
	}

	vector<Axioma> daBoss;
	for(unsigned int i=0;i<marks.size();i++)
		daBoss.push_back((axiomas[marks[i]]));
	Predicado pred(daBoss,valoresVariable);
	predicados.push_back(pred);

	all.update(axiomas,predicados);
	return all;
}

// MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN
// MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN
// MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN MAIN
int main(){
	Data all;
	vector<Axioma> axiomasBase, aux1;
	vector<Predicado> predicados, aux2;
	vector<vector<string> > input;
	vector<string> sample, sub;

	string line;
	//	cin>>line;
	line = "ave(X1),gallo(X2)";
	input = leerLinea(line);


	sample = leerLineaSimple("ave(pollo)");
	all.axiomasBase = addAxioma(sample,all.axiomasBase);

	sample = leerLineaSimple("ave(canario)");
	all.axiomasBase = addAxioma(sample,all.axiomasBase);

	sample = leerLineaSimple("ave(aguila)");
	all.axiomasBase = addAxioma(sample,all.axiomasBase);

	sample = leerLineaSimple("ave(pollo,no)");
	all.axiomasBase = addAxioma(sample,all.axiomasBase);

	sample = leerLineaSimple("herramienta(martillo)");
	all.axiomasBase = addAxioma(sample,all.axiomasBase);

	sample = leerLineaSimple("herramienta(pinzas)");
	all.axiomasBase = addAxioma(sample,all.axiomasBase);

	sample = leerLineaSimple("cosa(roma,tiene,coliseo)");
	all.axiomasBase = addAxioma(sample,all.axiomasBase);

	sample = leerLineaSimple("cosa(egipto,tiene,piramides)");
	all.axiomasBase = addAxioma(sample,all.axiomasBase);


	for(unsigned int i=0;i<all.axiomasBase.size();i++){
		cout<<"\t Mostrando los datos del axioma #"<<i<<":"<<endl;
		all.axiomasBase[i].show();
	}

	all = addPredicado(input,all);
	predicados = aux2;
	all.axiomasBase = aux1;
	for(unsigned int i=0;i<all.predicados.size();i++){
		cout<<"\t Mostrando los axiomas y variables del predicado #"<<i<<":"<<endl;
		all.predicados[i].show();
	}


	// Aqui va lo que debería correr en condiciones nomales, sigan el ejemplo
	while(true){
		string line;
		cin>>line;
		input = leerLinea(line);
		if(input.size()==1){
			all.axiomasBase = addAxioma(input[0],all.axiomasBase);
		}
		else{
			all = addPredicado(input,all);
		}
		for(unsigned int i=0;i<all.axiomasBase.size();i++){
			all.axiomasBase[i].show();
		}

		for(unsigned int i=0;i<all.predicados.size();i++){
			all.predicados[i].show();
		}
	}


	return 0;
}

